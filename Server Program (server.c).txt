Server Program (server.c)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void handle_client(int client_socket) {
  char buffer[BUFFER_SIZE];
  int bytes_read;

  while ((bytes_read = read(client_socket, buffer, BUFFER_SIZE)) > 0) {
    write(client_socket, buffer, bytes_read);  // Echo back the message
  }

  if (bytes_read < 0) {
    perror("Read error");
  } else if (bytes_read == 0) {
    printf("Client disconnected\n");
  }

  close(client_socket);
}

int main() {
  int server_socket, client_socket;
  struct sockaddr_in server_addr, client_addr;
  socklen_t client_addr_len = sizeof(client_addr);

  // Create socket
  if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("Socket failed");
    exit(EXIT_FAILURE);
  }

  // Set up server address
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = INADDR_ANY;
  server_addr.sin_port = htons(PORT);

  // Bind socket
  if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
    perror("Bind failed");
    close(server_socket);
    exit(EXIT_FAILURE);
  }

  // Listen for connections
  if (listen(server_socket, 3) < 0) {
    perror("Listen failed");
    close(server_socket);
    exit(EXIT_FAILURE);
  }

  printf("Server listening on port %d\n", PORT);

  // Accept and handle client connections
  while (1) {
    if ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len)) >= 0) {
      printf("Connection accepted from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
      handle_client(client_socket);
    } else {
      perror("Accept failed");
      break;
    }
  }

  close(server_socket);
  return 0;
}
Documentation:
Server Program (server.c)
Socket Creation: Creates a TCP socket using socket().
Binding: Binds the socket to the specified port (PORT).
Listening: Puts the server in a listening state using listen().
Accepting Connections: Accepts incoming client connections using accept().
Handling Clients: Reads messages from the client and echoes them back until the connection is closed.
Error Handling: Checks and handles errors at each step (socket creation, binding, listening, accepting, reading, and writing).
